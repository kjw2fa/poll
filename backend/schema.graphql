schema {
  query: RootQueryType
  mutation: Mutation
}

type CreatePollPayload {
  pollEdge: PollEdge
}

type LoginResponse {
  token: String
  userId: ID
  username: String
}

input PollOptionInput {
  id: ID
  optionText: String!
}

type Mutation {
  createPoll(title: String!, options: [PollOptionInput!]!, userId: ID!): CreatePollPayload
  submitVote(pollId: ID!, userId: ID!, ratings: [RatingInput!]!): SubmitVotePayload
  editPoll(pollId: ID!, userId: ID!, title: String!, options: [PollOptionInput!]!): Poll
  signup(username: String!, email: String!, password: String!): User
  login(username: String!, password: String!): LoginResponse
}

type MyPolls {
  createdPolls(first: Int, after: String, last: Int, before: String): PollConnection
  votedPolls(first: Int, after: String, last: Int, before: String): PollConnection
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PermissionType {
  VIEW
  VOTE
  EDIT
}

type Poll {
  id: ID!
  title: String
  options: [PollOption]
  permissions: [PollPermissions]
  votes: [Vote]
}

type PollConnection {
  edges: [PollEdge]
  pageInfo: PageInfo!
}

type PollEdge {
  cursor: String!
  node: Poll
}

type PollOption {
  id: ID!
  optionText: String
}

type PollPermissions {
  permission_type: PermissionType
  target_type: TargetType
  target_id: ID
}

input RatingInput {
  optionId: ID!
  rating: Int!
}

type RootQueryType {
  polls: [Poll]
  poll(id: ID!): Poll
  myPolls(userId: ID!): MyPolls
  searchPolls(searchTerm: String!): [Poll]
}

type SubmitVotePayload {
  pollEdge: PollEdge
}

enum TargetType {
  USER
  PUBLIC
}

type User {
  id: ID!
  username: String
}

type Vote {
  id: ID!
  user: User!
  poll: Poll!
  ratings: [VoteRating!]
}

type VoteRating {
    option: PollOption!
    rating: Int!
}

type WinningOption {
  option: String
  averageRating: Float
}

