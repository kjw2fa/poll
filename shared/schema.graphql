schema {
  query: RootQueryType
  mutation: Mutation
}

type RootQueryType {
  polls: [Poll!]!
  poll(id: ID!): Poll
  searchPolls(searchTerm: String!): [Poll!]!
  user(id: ID!): User
}

type Mutation {
  createPoll(title: String!, options: [PollOptionInput!]!, userId: ID!): Poll
  editPoll(pollId: ID!, userId: ID!, title: String!, options: [PollOptionEditInput!]!): Poll
  submitVote(pollId: ID!, userId: ID!, ratings: [VoteRatingInput!]!): Poll
  signup(username: String!, email: String!, password: String!): User
  login(usernameOrEmail: String!, password: String!): AuthPayload
}

type Poll {
  id: ID!
  title: String!
  options: [PollOption!]!
  votes: [Vote!]!
  permissions: [PollPermissions!]!
}

type PollOption {
  id: ID!
  optionText: String!
}

type Vote {
  id: ID!
  user: User!
  poll: Poll!
  ratings: [VoteRating!]!
}

type User {
  id: ID!
  username: String!
  email: String!
  polls(permission: PermissionType): [Poll!]!
}

type PollPermissions {
  id: ID!
  permission_type: PermissionType!
  target_type: TargetType!
  target_id: ID
}

type VoteRating {
  option: PollOption!
  rating: Int!
}

input PollOptionInput {
  optionText: String!
}

input VoteRatingInput {
  optionId: ID!
  rating: Int!
}

input PollOptionEditInput {
  id: ID
  optionText: String!
}

type AuthPayload {
  token: String!
  userId: ID!
  username: String!
}

enum PermissionType {
  VIEW
  VOTE
  EDIT
}

enum TargetType {
  USER
  PUBLIC
}
